package indi.hiro.pagoda;

import java.util.Arrays;

/**
 * Created by Hiro on 2019/4/4.
 */
public class SZL001C {

    /**
     * Find = 1   Index = 2   Index = 13   Index = 257
     * Find = 2   Index = 47
     * Find = 3   Index = 81
     * Find = 4   Index = 115
     * Find = 5   Index = 149
     * Find = 6
     * Find = 7   Index = 183
     * Find = 8   Index = 217
     */
    public static final byte[] SZL_DATA = {
            (byte)0xFF,0x09,0x01,0x5C,0x00,0x1C,0x00,0x00,0x00,0x22,0x00,0x0A,0x00,
            0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x09,0x00,0x2A,(byte)0xF6,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x0B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    };
    public static final int[] SPLIT_INDEX = {0, 13, 47, 81, 115, 149, 183, 217, 251, 285, 319, 352};

    private String deviceName = "Sophorose";
    private String moduleName = "CPU 317-2 PN/DP";
    private String vendorCopyright = "Original Siemens Equipment";
    private String serialNumber = "S C-H8M096762016";
    private String cpuModel = "CPU 317-2 PN/DP";
    private String mmcModel = "MMC 267FF11F";

    public byte[] getData() {
        byte[] data = Arrays.copyOf(SZL_DATA, SZL_DATA.length);
        stringCopy(deviceName, data, 1);
        stringCopy(moduleName, data, 2);
        stringCopy(vendorCopyright, data, 4);
        stringCopy(serialNumber, data, 5);
        stringCopy(cpuModel, data, 6);
        stringCopy(mmcModel, data, 7);
        return data;
    }

    private void stringCopy(String src, byte[] dst, int gapIndex) {
        stringCopy(src, dst, SPLIT_INDEX[gapIndex] + 1, SPLIT_INDEX[gapIndex + 1] - SPLIT_INDEX[gapIndex] - 2);
    }

    private void stringCopy(String src, byte[] dst, int offset, int maxLen) {
        byte[] srcBB = src.getBytes();
        System.arraycopy(srcBB, 0, dst, offset, Math.min(srcBB.length, maxLen));
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        CodeC.writeByteArray(sb, getData(), "SZL_ID_001C_IDX_XXXX");
        return sb.toString();
    }
}
